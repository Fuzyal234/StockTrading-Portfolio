generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "darwin-arm64", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://stock-market-user:postgres@stock-market-db:5432/stock_portfolio"
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  password  String
  name      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  portfolios Portfolio[]
  trades    Trade[]
  watchlists Watchlist[]
  alerts    Alert[]
  dividends DividendHistory[]
  analytics PortfolioAnalytics[]
}

model Portfolio {
  id        Int       @id @default(autoincrement())
  name      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  stocks    Stock[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Stock {
  id          Int       @id @default(autoincrement())
  symbol      String
  name        String
  quantity    Int
  purchasePrice Float
  portfolioId Int
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Trade {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  stockId   String
  type      String    // "BUY" or "SELL"
  quantity  Int
  price     Float
  timestamp DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Watchlist {
  id        Int       @id @default(autoincrement())
  name      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  symbols   String[]  // Array of stock symbols
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Alert {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  symbol    String
  type      String    // "PRICE_ABOVE" or "PRICE_BELOW"
  price     Float
  active    Boolean   @default(true)
  triggered Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DividendHistory {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  symbol       String
  amount       Float
  paymentDate  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PortfolioAnalytics {
  id                Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  date             DateTime
  totalValue       Float
  cashBalance      Float
  dayReturn        Float
  totalReturn      Float
  sectorAllocation Json     // Stores sector-wise allocation percentages
  riskMetrics      Json     // Stores various risk metrics (beta, sharpe ratio, etc.)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([userId, date])
}